//
//  BIP38Tests.m
//  GreenAddress
//

#import <XCTest/XCTest.h>
#import "bip38.h"

@interface BIP38Tests : XCTestCase

@end

@implementation BIP38Tests

- (void)setUp {
    [super setUp];
    // Put setup code here. This method is called before the invocation of each test method in the class.
}

- (void)tearDown {
    // Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
}

/* Below tests are autogenerated from
   https://github.com/bitcoinjs/bip38/blob/master/test/fixtures.json
   by the following Python oneliners:
 
 * Valid:
 print ';\n'.join('XCTAssertEqualObjects([bip38 decode:@"%(bip38)s" withPassword:@"%(passphrase)s" error:nil], @"%(wif)s")' % test for test in tests['valid'])+';' 
 
 * Invalid:
 print ';\n'.join('error = [[NSError alloc] initWithDomain:@"test" code:0 userInfo:nil];\n[bip38 decode:@"%(base58)s" withPassword:@"" error:&error];\nXCTAssertEqualObjects([error domain], @"invalid_privkey")' % test for test in tests['invalid']['verify'])+';'
 
*/

- (void)testValid {
    // This is an example of a functional test case.
    // Use XCTAssert and related functions to verify your tests produce the correct results.
    XCTAssertEqualObjects([bip38 decode:@"6PRVWUbkzzsbcVac2qwfssoUJAN1Xhrg6bNk8J7Nzm5H7kxEbn2Nh2ZoGg" withPassword:@"TestingOneTwoThree" error:nil], @"5KN7MzqK5wt2TP1fQCYyHBtDrXdJuXbUzm4A9rKAteGu3Qi5CVR");
    XCTAssertEqualObjects([bip38 decode:@"6PRNFFkZc2NZ6dJqFfhRoFNMR9Lnyj7dYGrzdgXXVMXcxoKTePPX1dWByq" withPassword:@"Satoshi" error:nil], @"5HtasZ6ofTHP6HCwTqTkLDuLQisYPah7aUnSKfC7h4hMUVw2gi5");
    XCTAssertEqualObjects([bip38 decode:@"6PYNKZ1EAgYgmQfmNVamxyXVWHzK5s6DGhwP4J5o44cvXdoY7sRzhtpUeo" withPassword:@"TestingOneTwoThree" error:nil], @"L44B5gGEpqEDRS9vVPz7QT35jcBG2r3CZwSwQ4fCewXAhAhqGVpP");
    XCTAssertEqualObjects([bip38 decode:@"6PYLtMnXvfG3oJde97zRyLYFZCYizPU5T3LwgdYJz1fRhh16bU7u6PPmY7" withPassword:@"Satoshi" error:nil], @"KwYgW8gcxj1JWJXhPSu4Fqwzfhp5Yfi42mdYmMa4XqK7NJxXUSK7");
    XCTAssertEqualObjects([bip38 decode:@"6PfQu77ygVyJLZjfvMLyhLMQbYnu5uguoJJ4kMCLqWwPEdfpwANVS76gTX" withPassword:@"TestingOneTwoThree" error:nil], @"5K4caxezwjGCGfnoPTZ8tMcJBLB7Jvyjv4xxeacadhq8nLisLR2");
    XCTAssertEqualObjects([bip38 decode:@"6PfLGnQs6VZnrNpmVKfjotbnQuaJK4KZoPFrAjx1JMJUa1Ft8gnf5WxfKd" withPassword:@"Satoshi" error:nil], @"5KJ51SgxWaAYR13zd9ReMhJpwrcX47xTJh2D3fGPG9CM8vkv5sH");
    XCTAssertEqualObjects([bip38 decode:@"6PgNBNNzDkKdhkT6uJntUXwwzQV8Rr2tZcbkDcuC9DZRsS6AtHts4Ypo1j" withPassword:@"MOLON LABE" error:nil], @"5JLdxTtcTHcfYcmJsNVy1v2PMDx432JPoYcBTVVRHpPaxUrdtf8");
    XCTAssertEqualObjects([bip38 decode:@"6PgGWtx25kUg8QWvwuJAgorN6k9FbE25rv5dMRwu5SKMnfpfVe5mar2ngH" withPassword:@"ΜΟΛΩΝ ΛΑΒΕ" error:nil], @"5KMKKuUmAkiNbA3DazMQiLfDq47qs8MAEThm4yL8R2PhV1ov33D");
}

- (void)testInvalid {
    NSError *error;
    error = [[NSError alloc] initWithDomain:@"test" code:0 userInfo:nil];
    [bip38 decode:@"6PgGWtx25kUg8QWvwuJAgorN6k9FbE25rv5dMRwu5SKMnfpfVe5marXXXX" withPassword:@"" error:&error];
    XCTAssertEqualObjects([error domain], @"invalid_privkey");
    error = [[NSError alloc] initWithDomain:@"test" code:0 userInfo:nil];
    [bip38 decode:@"QmxDezFMDL7ExfYmsETsQXAtBbw5YE1CDyA8pm1AGpMpVVUpsVy1yXv4VTL" withPassword:@"" error:&error];
    XCTAssertEqualObjects([error domain], @"invalid_privkey");
    error = [[NSError alloc] initWithDomain:@"test" code:0 userInfo:nil];
    [bip38 decode:@"2DnNxWcx4Prn8wmjbkvtYGDALsq8BMWxQ33KnXkeH8vrxE41psDLXRmK3" withPassword:@"" error:&error];
    XCTAssertEqualObjects([error domain], @"invalid_privkey");
    error = [[NSError alloc] initWithDomain:@"test" code:0 userInfo:nil];
    [bip38 decode:@"AfE1YY4Wr2FLAENaH9PVaLRdyk714V4rhwiJMSGyQCGFB3rhGDCs2R7c4s" withPassword:@"" error:&error];
    XCTAssertEqualObjects([error domain], @"invalid_privkey");
    error = [[NSError alloc] initWithDomain:@"test" code:0 userInfo:nil];
    [bip38 decode:@"5JjnYkbFBmUnhGeDMVhR7aSitLToe1odEfXDBeg4RMK6JmAm9g7rkm7qY3" withPassword:@"" error:&error];
    XCTAssertEqualObjects([error domain], @"invalid_privkey");
    error = [[NSError alloc] initWithDomain:@"test" code:0 userInfo:nil];
    [bip38 decode:@"5JbtdQFKSemRTqMuWrJgSfzE8AX2jdz1KiZuMmuUcv9iXha1s6UarQTciW" withPassword:@"" error:&error];
    XCTAssertEqualObjects([error domain], @"invalid_privkey");
    error = [[NSError alloc] initWithDomain:@"test" code:0 userInfo:nil];
    [bip38 decode:@"5HyV7HSYdHUgLf7w36mxMHDPH9muTgUYHEj6cEogKMuV7ae8VRM3VEg56w" withPassword:@"" error:&error];
    XCTAssertEqualObjects([error domain], @"invalid_privkey");
}

@end
